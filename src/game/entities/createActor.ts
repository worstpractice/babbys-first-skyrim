import { Body, Box, Vec3 } from 'cannon-es';
import { ObSet } from 'obset';
import { createInventory } from 'src/game/entities/createInventory';
import { loadKnightAnimations } from 'src/game/loading/loadKnightAnimations';
import { loadKnightModel } from 'src/game/loading/loadKnightModel';
import { loadWeaponModel } from 'src/game/loading/loadWeaponModel';
import type { Action } from 'src/game/typings/Action';
import type { Actor } from 'src/game/typings/Actor';
import type { Animation } from 'src/game/typings/Animation';
import type { Effect } from 'src/game/typings/Effect';
import type { Table } from 'src/game/typings/Table';
import { uuid } from 'src/game/utils/uuid';
import { snitch } from 'src/utils/snitch';
import type { LoadingManager } from 'three';
import { AnimationMixer, LoopOnce } from 'three';

type Props = {
  readonly loadingManager: LoadingManager;
  readonly mixers: AnimationMixer[];
};

export const createActor = async ({ loadingManager, mixers }: Props): Promise<Actor> => {
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Load Model *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Loading player model must complete before loading weapon model may commence
  const model = await loadKnightModel({ loadingManager }); // Every model has one mixer

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Create Mixer *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const mixer = new AnimationMixer(model); // Every mixer has one model

  mixers.push(mixer);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Load Assets *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const promises = [
    //
    loadKnightAnimations(loadingManager),
    loadWeaponModel(loadingManager, model),
  ] as const;

  // Run in parallell, but purposefully ignore the 2nd result (which is void)
  const [nameClipDuos] = await Promise.all(promises);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Create Action Clips *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const entries = nameClipDuos.map(([action, animationClip]) => {
    animationClip.name = `${action}Clip` as const;

    const animationAction = mixer.clipAction(animationClip);

    const shouldLoopOnce = animationClip.name === 'jumpingClip' || animationClip.name === 'attackingClip';

    if (shouldLoopOnce) {
      animationAction.setLoop(LoopOnce, 1);
    }

    const animation: Animation = {
      animationAction,
      animationClip,
    } as const;

    return [action, animation] as const;
  });

  const animations: Table<Action, Animation> = Object.fromEntries(entries);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Create Physics *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const body = new Body({
    mass: 80, // kg
    position: new Vec3(0, 20, 0),
    shape: new Box(new Vec3(6, 12, 6)),
    type: Body.DYNAMIC,
  });

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Create ObSets *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const actions = new ObSet<Action>()
    //
    .on('add', snitch)
    .on('delete', snitch);

  const effects = new ObSet<Effect>()
    //
    .on('add', snitch)
    .on('delete', snitch);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Create Inventory *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const inventory = createInventory();

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // * Create Player *
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  return {
    actions,
    animations,
    body,
    effects,
    id: uuid(),
    inventory,
    mixer,
    model,
  } as const;
};
